What happens when you initialize a repository? Why do you need to do it?
A .git directory is created which makes the directory a repository.
We must create a repo so that we can save different versions of files and access them whenever needed.

How is the staging area different from the working directory and the repository? 
What value do you think it offers?
We can add files that we want to be included in the commit to the staging area.
Staging area acts as an intermediary between working directory and repository.

How can you use the staging area to make sure you have one commit per logical change?
After making the change, add the changed file to the staging area. Then use git diff --staged to check
whether there are any changed files in the staging area as compared to the most recent commit.

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?
It will be useful when we want to make some changes that are conceptually different from our main 
aim of making the app. Like if we want to try out a different language version of our app 
then commitiing it in a separate branch would be useful.

How do the diagrams help you visualize the branch structure?
The diagrams helps us see how many branches we have created and all the commits made on every branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
After merging, the additions and deletions from both branches are taken into account and a new commit is
created pointing to one of the branches. 
Representing it in the tree diagram makes it visually clear to understand the branch structure after merging.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros: Saves a lot of time and makes tasks simpler. Also if there is a conflict, it allows 
the user to resolve it and only then proceed further.
Cons: Automatic merging can sometimes result in some ambiguity in the code. 
